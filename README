This is the module for working with sqlite databases:
Usage can be something like:

from sql import *

db = DataBase('test.sqlite')
query = SqlBuilder()
query.Select(db.items.id_section, db.items.id_brand)\
	.From(db.items)\
	.Join(db.sections, db.sections.id == db.items.id_section, 'left')\
	.Join(db.info, db.info.id == db.info.id_item, 'inner')\
	.Where((db.items.name != 'test') | (db.info.id > 5) & (db.info.id < 4000) | (db.items.id_src.In(1,2)))\
	.And((db.items.id > 0) & (db.info.id > 0))\
	.Or(db.items.is_new == 0)\
	.GroupBy(db.items.id_section, db.items.id_brand)\
	.Having('sum(items.price) > 10')\
	.OrderBy(db.items.id_brand, 'desc')\
	.Limit(50, 5)
rows = query.FetchFrom(db)
print('Result:', dict((row['id_section'], row['id_brand']) for row in rows)) 
 
Sql builder class supports:
	- protection from SQL injection
	- updating and deleting records
	- selecting all fields from a table
	- working with complex WHERE cases: SELECT ... WHERE (flag = "A" OR (flag = "B" AND class = "m")) AND (position < 10)
	- SQL joins
	- working with lists, sets and other sequential types in scope of SQL IN operator: SELECT ... WHERE id IN (1, 2, 3, 4)
	- working with query parameters, that is an ability to create query once and then run it several times with different parameters
	- data types checking, i.e. it's not possible to do ...Where(db.Users.login < 5) if Users.login is string
	- operations checking: sql.Select(...).And(...).Where(...) leads to exception
